
version: 2

# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com
before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
    # you may remove this if you don't need go generate
    - go generate ./...

archives:
  - #
    # Include additional files in the release
    files:
      - README.md
      - LICENSE
      - src: scripts/systemd/norn.service
        dst: etc/systemd/system

# .goreleaser.yaml
builds:
  # You can have multiple builds defined as a yaml list
  - main: ./cmd/cli

    # Binary name.
    # Can be a path (e.g. `bin/app`) to wrap the binary in a directory.
    #
    # Default: Project directory name
    binary: "norn"
    id: "norn"

    # Custom ldflags.
    #
    # Default: '-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}} -X main.builtBy=goreleaser'
    # Templates: allowed
    ldflags:
      - -s -w -X github.com/nornforge/norn/version.VersionInput={{.Version}}

    # Custom environment variables to be set during the builds.
    # Invalid environment variables will be ignored.
    #
    # Default: os.Environ() ++ env config section
    # Templates: allowed (since v1.14)
    env:
      - CGO_ENABLED=0
    goos:
      - linux

    goarch:
      - amd64
      - arm64


    # Set the modified timestamp on the output binary, typically
    # you would do this to ensure a build was reproducible.
    # Pass an empty string to skip modifying the output.
    #
    # Templates: allowed
    mod_timestamp: "{{ .CommitTimestamp }}"
    
  # You can have multiple builds defined as a yaml list
  - main: ./cmd/client

    # Binary name.
    # Can be a path (e.g. `bin/app`) to wrap the binary in a directory.
    #
    # Default: Project directory name
    binary: "norn-client"
    id: "norn-client"

    # Custom ldflags.
    #
    # Default: '-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}} -X main.builtBy=goreleaser'
    # Templates: allowed
    ldflags:
      - -s -w -X github.com/nornforge/norn/version.VersionInput={{.Version}}

    # Custom environment variables to be set during the builds.
    # Invalid environment variables will be ignored.
    #
    # Default: os.Environ() ++ env config section
    # Templates: allowed (since v1.14)
    env:
      - CGO_ENABLED=0
    goos:
      - linux

    goarch:
      - amd64
      - arm64

    # Set the modified timestamp on the output binary, typically
    # you would do this to ensure a build was reproducible.
    # Pass an empty string to skip modifying the output.
    #
    # Templates: allowed
    mod_timestamp: "{{ .CommitTimestamp }}"
